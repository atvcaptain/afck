#!/bin/bash
#
# Utility to unpack the ext4 image under Linux.
#
# Works with raw or sparse file system images.
#
# The utility requires administrative rights and restarts itself
# through sudo in case of their absence.
#

IMG="$1"
OUT="$2"
OWNER="$3"

if [ -z "$OUT" ] ; then
	echo "Unpacks raw/sparse ext4 image into specified directory"
	echo "Run: $0 <image ext4> <output directory> [uid:gid]"
	exit 1
fi

if [ $(id -u) != 0 ]; then
	# The script works only on behalf of an administrator
	exec sudo "$0" "$1" "$2" $(id -u):$(id -g)
fi

set -e

# If the output directory does not exist, we create
test -d "$OUT" || mkdir -p "$OUT"
# The path to other utilities
TOOLS_DIR=$(dirname $(readlink -f $0))
# Section name
PART=$(basename "$OUT")
# File with saved uid/gid files
STATS=$(dirname "$OUT")/${PART}_statfile.txt

# If the image is in sparse format, first convert it to raw format
read magic < <(od -Anone -N4 -tx1 "${IMG}")
if test "$magic" == "3a ff 26 ed" ; then
	if ! test -e "${IMG}.raw" || test "$IMG" -nt "${IMG}.raw" ; then
		echo "Converting sparse image $IMG to raw format ..."
		$TOOLS_DIR/simg2img "$IMG" "${IMG}.raw"
	fi
	IMG="${IMG}.raw"
fi

TMP=$(mktemp -d ext4.XXXX)
trap "set +e; umount $TMP &>/dev/null; rmdir $TMP" EXIT
mount -o loop "$IMG" $TMP

echo "Save access modes to files in $STATS ..."
find $TMP | while IFS= read fn ; do
	test "$fn" = "$TMP" && continue
	# Remove the base directory from the file name, add a prefix by image name
	rfn="${PART}/${fn/$TMP\/}"
	test -z "$rfn" && continue
	uid_gid_mode=$(stat -c "%u %g 0%a" "$fn")
	caps=$($TOOLS_DIR/getcapn "$fn" 2>/dev/null || true)
	if test -n "$caps" ; then
		echo "$rfn $uid_gid_mode capabilities=$caps"
	else
		echo "$rfn $uid_gid_mode"
	fi
done > $STATS

echo "Extract files from $IMG ..."
cp -dR --preserve=mode,links,xattr $TMP/. "$OUT"/

if test -n "$OWNER" ; then
	chown $OWNER -R "$OUT"
	chown $OWNER $STATS
fi
